# -*- coding: utf-8 -*-
"""classificacao_roupas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iCouigM1Mq8o8gcnZTlELvQq2KEE4A_T
"""

#Imports
import tensorflow
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np

#Carregar o Dataset
dataset = keras.datasets.fashion_mnist
((x_treino,y_treino),(x_teste,y_teste)) = dataset.load_data()

# x = iamgens / y = identificações

#Explorar os dados
len(x_treino)
x_treino.shape
x_teste.shape
len(y_teste)
y_treino.min()
y_treino.max()

#Exibir os dados
total_de_classificacoes = 10
nomes_de_classificacoes = ['Camiseta', 'Calça', 'Pullover',
                           'Vestido', 'Casaco', 'Sandália', 'Camisa',
                           'Tenis', 'Bolsa', 'Bota']

#plt.imshow(x_treino[0])
#plt.title(y_treino[0])

#for imagem in range(10):
#  plt.subplot(2,5,imagem+1)
#  plt.imshow(x_treino [imagem])
#  plt.title(nomes_de_classificacoes[y_treino[imagem]])

plt.imshow(x_treino[33])
plt.colorbar()

#Normalização
x_treino = x_treino/float(255)

#Criando o modelo
# Rede Neural com 3 camadas

modelo = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(256, activation=tensorflow.nn.relu),
    keras.layers.Dropout(0.2),
    #keras.layers.Dense(128, activation=tensorflow.nn.relu),
    #keras.layers.Dense(64, activation=tensorflow.nn.relu),
    keras.layers.Dense(10, activation=tensorflow.nn.softmax)
])

#Compilando o modelo
modelo.compile(optimizer='adam',
               loss='sparse_categorical_crossentropy',
               metrics=['accuracy'])

#Ensinando o modelo
historico = modelo.fit(x_treino, y_treino, epochs=6, validation_split=0.2)

#Resumo do modelo
modelo.summary()



#Salvando e carregando o modelo treinado
from tensorflow.keras.models import load_model
import tensorflow as tf # Importe 'tensorflow'

modelo.save('modelo.keras')
modelo_salvo = load_model('modelo.keras', custom_objects={'softmax_v2': tf.nn.softmax}) # Diga ao load_model como lidar com 'softmax_v2'

#Criação de gráficos

plt.plot(historico.history['accuracy'])
plt.plot(historico.history['val_accuracy'])
plt.title('Acurácia por Épocas')
plt.xlabel('Epoch')
plt.ylabel('Accurancy')
plt.legend(['Treino', 'Validação'])

plt.plot(historico.history['loss'])
plt.plot(historico.history['val_loss'])
plt.title('Perda de dados por Épocas')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Treino', 'Validação'])

#Testando o modelo e o modelo salvo

testes = modelo.predict(x_teste)
print("Resultado teste:", np.argmax(testes[1]))
print("Valor Real:", y_teste[1])

testes_modelo_salvo = modelo_salvo.predict(x_teste)
print("Resultado teste do modelo salvo:", np.argmax(testes_modelo_salvo[1]))
print("Valor Real:", y_teste[1])

#Avaliando o modelo

perda_teste, acuracia_teste = modelo.evaluate(x_teste, y_teste)
print("Perda:", perda_teste)
print("Acurácia:", acuracia_teste)